generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-1.1.x"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model admin_permissions {
  id               String             @id
  name             String             @unique
  description      String?
  created_at       DateTime?          @default(now()) @db.Timestamptz(6)
  role_permissions role_permissions[]
}

model admin_users {
  id              String         @id @db.Uuid
  auth_user_id    String?        @db.Uuid
  email           String         @unique
  username        String
  organization_id String?        @db.Uuid
  admin_role      admin_role
  is_active       Boolean?       @default(true)
  created_at      DateTime?      @default(now()) @db.Timestamptz(6)
  updated_at      DateTime?      @default(now()) @db.Timestamptz(6)
  auth_users      auth_users?    @relation(fields: [auth_user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  organizations   organizations? @relation(fields: [organization_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  coaches         coaches?
}

model auth_users {
  id          String        @id @db.Uuid
  email       String?       @unique
  created_at  DateTime?     @default(now()) @db.Timestamptz(6)
  updated_at  DateTime?     @default(now()) @db.Timestamptz(6)
  admin_users admin_users[]
}

model challenge_coaches {
  id           String     @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  challenge_id String     @db.Uuid
  coach_id     String     @db.Uuid
  created_at   DateTime?  @default(now()) @db.Timestamptz(6)
  challenges   challenges @relation(fields: [challenge_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  coaches      coaches    @relation(fields: [coach_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@unique([challenge_id, coach_id])
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model challenge_participants {
  id                String          @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  service_user_id   String          @db.Uuid
  challenge_id      String          @db.Uuid
  assigned_coach_id String?         @db.Uuid
  join_date         DateTime?       @default(now()) @db.Timestamptz(6)
  status            String?         @default("active")
  created_at        DateTime?       @default(now()) @db.Timestamptz(6)
  updated_at        DateTime?       @default(now()) @db.Timestamptz(6)
  coach_memo        String?
  memo_record_date  DateTime?       @db.Timestamptz(6)
  coaches           coaches?        @relation(fields: [assigned_coach_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  challenges        challenges      @relation(fields: [challenge_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users             users           @relation(fields: [service_user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  daily_records     daily_records[]

  @@unique([service_user_id, challenge_id])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model challenges {
  id                     String                   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  organization_id        String                   @db.Uuid
  challenge_type         challenge_type
  title                  String
  description            String?
  start_date             DateTime                 @db.Date
  end_date               DateTime                 @db.Date
  created_at             DateTime?                @default(now()) @db.Timestamptz(6)
  updated_at             DateTime?                @default(now()) @db.Timestamptz(6)
  challenge_coaches      challenge_coaches[]
  challenge_participants challenge_participants[]
  organizations          organizations            @relation(fields: [organization_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model coaches {
  id                     String                   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  admin_user_id          String                   @unique @db.Uuid
  organization_id        String                   @db.Uuid
  profile_image_url      String?
  introduction           String?
  specialization         String[]
  is_active              Boolean?                 @default(true)
  created_at             DateTime?                @default(now()) @db.Timestamptz(6)
  updated_at             DateTime?                @default(now()) @db.Timestamptz(6)
  challenge_coaches      challenge_coaches[]
  challenge_participants challenge_participants[]
  admin_users            admin_users              @relation(fields: [admin_user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  organizations          organizations            @relation(fields: [organization_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  feedbacks              feedbacks[]
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model daily_records {
  id                     String                 @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  participant_id         String                 @db.Uuid
  record_date            DateTime               @db.Date
  created_at             DateTime?              @default(now()) @db.Timestamptz(6)
  updated_at             DateTime?              @default(now()) @db.Timestamptz(6)
  challenge_participants challenge_participants @relation(fields: [participant_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  feedbacks              feedbacks?
  meals                  meals[]

  @@unique([participant_id, record_date])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model meal_photos {
  id         String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  meal_id    String    @db.Uuid
  photo_url  String
  created_at DateTime? @default(now()) @db.Timestamptz(6)
  meals      meals     @relation(fields: [meal_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model meals {
  id              String        @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  daily_record_id String        @db.Uuid
  meal_type       meal_type
  description     String
  created_at      DateTime?     @default(now()) @db.Timestamptz(6)
  updated_at      DateTime?     @default(now()) @db.Timestamptz(6)
  meal_time       DateTime?     @db.Timestamptz(6)
  meal_photos     meal_photos[]
  daily_records   daily_records @relation(fields: [daily_record_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model organizations {
  id          String        @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name        String
  description String?
  logo_url    String?
  created_at  DateTime?     @default(now()) @db.Timestamptz(6)
  updated_at  DateTime?     @default(now()) @db.Timestamptz(6)
  admin_users admin_users[]
  challenges  challenges[]
  coaches     coaches[]
}

model role_permissions {
  id                String            @id
  admin_role        admin_role
  permission_id     String
  created_at        DateTime?         @default(now()) @db.Timestamptz(6)
  admin_permissions admin_permissions @relation(fields: [permission_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@unique([admin_role, permission_id])
}

model users {
  id                     String                   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  discord_id             String?                  @unique @db.VarChar(255)
  username               String?                  @db.VarChar(50)
  name                   String                   @db.VarChar(100)
  email                  String                   @unique @db.VarChar(255)
  google_id              String?
  phone_number           String?                  @unique @db.VarChar(20)
  gender                 gender
  birth                  DateTime                 @db.Date
  resting_heart_rate     Int?
  created_at             DateTime?                @default(now()) @db.Timestamp(6)
  updated_at             DateTime?                @default(now()) @db.Timestamp(6)
  profile_image_url      String?
  challenge_participants challenge_participants[]
  workouts               workouts[]
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model feedbacks {
  id              String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  daily_record_id String        @unique @db.Uuid
  coach_id        String?       @db.Uuid
  ai_feedback     String
  coach_feedback  String?
  coach_memo      String?
  created_at      DateTime?     @default(now()) @db.Timestamptz(6)
  updated_at      DateTime?     @default(now()) @db.Timestamptz(6)
  coaches         coaches?      @relation(fields: [coach_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  daily_records   daily_records @relation(fields: [daily_record_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model workout_types {
  id                 String               @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name               String               @db.VarChar(20)
  created_at         DateTime?            @default(now()) @db.Timestamp(6)
  workout_categories workout_categories[]
}

model workouts {
  id               String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id          String?   @db.Uuid
  category_id      String?   @db.Uuid
  title            String    @db.VarChar(100)
  timestamp        DateTime  @db.Timestamp(6)
  duration_minutes Int
  avg_heart_rate   Int
  max_heart_rate   Int?
  points           Float     @db.Real
  calories         Int
  progress         Decimal?  @db.Decimal(3, 2)
  note             String?
  created_at       DateTime? @default(now()) @db.Timestamp(6)
  intensity        Int?      @db.SmallInt
  users            users?    @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model workout_categories {
  id            String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  type_id       String?        @db.Uuid
  name_ko       String         @db.VarChar(50)
  name_en       String         @db.VarChar(50)
  icon          String?        @db.VarChar(50)
  color         String?        @db.VarChar(7)
  created_at    DateTime?      @default(now()) @db.Timestamp(6)
  workout_types workout_types? @relation(fields: [type_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

enum admin_role {
  system_admin
  developer
  organization_owner
  organization_admin
  coach
}

enum challenge_type {
  diet
  exercise
  diet_and_exercise
}

enum gender {
  male
  female
  other
  undisclosed
}

enum meal_type {
  breakfast
  lunch
  dinner
  snack
  supplement
}
